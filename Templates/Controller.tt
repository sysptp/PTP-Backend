using System.Net.Mime;
using BussinessLayer.DTOs.ModuloCitas.{{ModelName}};
using BussinessLayer.Interfaces.Services.ModuloCitas;
using BussinessLayer.Wrappers;
using FluentValidation;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace PTP_API.Controllers.ModuloCita
{
    [ApiController]
    [SwaggerTag("Gestión de {{ModelName}}")]
    [Route("api/v1/[controller]")]
    [Authorize]
    public class {{ModelName}}Controller : ControllerBase
    {
        private readonly I{{ModelName}}Service _{{ModelNameLower}}Service;
        private readonly IValidator<{{ModelName}}Request> _validator;

        public {{ModelName}}Controller(I{{ModelName}}Service {{ModelNameLower}}Service, IValidator<{{ModelName}}Request> validator)
        {
            _{{ModelNameLower}}Service = {{ModelNameLower}}Service;
            _validator = validator;
        }

        [HttpGet]
        [ProducesResponseType(typeof(Response<IEnumerable<{{ModelName}}Response>>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [SwaggerOperation(Summary = "Obtener {{ModelName}}", Description = "Devuelve una lista de {{ModelName}} o un elemento específico si se proporciona un ID")]
        public async Task<IActionResult> GetAll([FromQuery] long? id, long? companyId)
        {
            try
            {
                if (id.HasValue)
                {
                    var item = await _{{ModelNameLower}}Service.GetByIdResponse(id.Value);
                    if (item == null)
                        return NotFound(Response<{{ModelName}}Response>.NotFound("{{ModelName}} no encontrado."));

                    return Ok(Response<{{ModelName}}Response>.Success(item, "{{ModelName}} encontrado."));
                }
                else
                {
                    var items = await _{{ModelNameLower}}Service.GetAllDto();
                    if (items == null || !items.Any())
                        return StatusCode(204, Response<IEnumerable<{{ModelName}}Response>>.NoContent("No hay {{ModelName}} disponibles."));

                    return Ok(Response<IEnumerable<{{ModelName}}Response>>.Success(
                        companyId != null ? items.Where(x => x.CompanyId == companyId).ToList() : items, "{{ModelName}} obtenidos correctamente."));
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, Response<string>.ServerError(ex.Message));
            }
        }

        [HttpPost]
        [Consumes(MediaTypeNames.Application.Json)]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [SwaggerOperation(Summary = "Crear {{ModelName}}", Description = "Endpoint para registrar un nuevo {{ModelName}}")]
        public async Task<IActionResult> Create([FromBody] {{ModelName}}Request request)
        {
            try
            {
                var validationResult = await _validator.ValidateAsync(request);

                if (!validationResult.IsValid)
                {
                    var errors = validationResult.Errors.Select(e => e.ErrorMessage).ToList();
                    return BadRequest(Response<string>.BadRequest(errors, 400));
                }

                var response = await _{{ModelNameLower}}Service.Add(request);
                return CreatedAtAction(nameof(GetAll), Response<{{ModelName}}Response>.Created(response));
            }
            catch (Exception ex)
            {
                return StatusCode(500, Response<string>.ServerError(ex.Message));
            }
        }

        [HttpPut("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [SwaggerOperation(Summary = "Actualizar {{ModelName}}", Description = "Endpoint para actualizar un {{ModelName}}")]
        public async Task<IActionResult> Update(long id, [FromBody] {{ModelName}}Request request)
        {
            try
            {
                var validationResult = await _validator.ValidateAsync(request);

                if (!validationResult.IsValid)
                {
                    var errors = validationResult.Errors.Select(e => e.ErrorMessage).ToList();
                    return BadRequest(Response<string>.BadRequest(errors, 400));
                }

                var existingItem = await _{{ModelNameLower}}Service.GetByIdRequest(id);
                if (existingItem == null)
                    return NotFound(Response<string>.NotFound("{{ModelName}} no encontrado."));

                request.Id = id;
                await _{{ModelNameLower}}Service.Update(request, id);
                return Ok(Response<string>.Success(null, "{{ModelName}} actualizado correctamente."));
            }
            catch (Exception ex)
            {
                return StatusCode(500, Response<string>.ServerError(ex.Message));
            }
        }

        [HttpDelete("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [SwaggerOperation(Summary = "Eliminar {{ModelName}}", Description = "Endpoint para eliminar un {{ModelName}}")]
        public async Task<IActionResult> Delete(long id)
        {
            try
            {
                var existingItem = await _{{ModelNameLower}}Service.GetByIdRequest(id);
                if (existingItem == null)
                    return NotFound(Response<string>.NotFound("{{ModelName}} no encontrado."));

                await _{{ModelNameLower}}Service.Delete(id);
                return Ok(Response<string>.Success(null, "{{ModelName}} eliminado correctamente."));
            }
            catch (Exception ex)
            {
                return StatusCode(500, Response<string>.ServerError(ex.Message));
            }
        }
    }
}